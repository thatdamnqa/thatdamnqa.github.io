<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.4">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2019-03-31T12:28:15-05:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">Daniel Shaw</title><subtitle>Software QA. I also develop things at the weekend.</subtitle><entry><title type="html">Speaking at PHP Yorkshire 2019</title><link href="http://0.0.0.0:4000/speaking/2019-03/speaking-php-yorkshire-2019" rel="alternate" type="text/html" title="Speaking at PHP Yorkshire 2019" /><published>2019-03-22T19:00:00-05:00</published><updated>2019-03-22T19:00:00-05:00</updated><id>http://0.0.0.0:4000/speaking/2019-03/speaking-php-yorkshire-2019</id><content type="html" xml:base="http://0.0.0.0:4000/speaking/2019-03/speaking-php-yorkshire-2019">&lt;p&gt;I’m thrilled to be speaking at PHP Yorkshire this year. After helping out organise the conference
for the last couple of years, it’s nice to be speaking there this year.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Those teams working in an agile fashion will usually bring the tester in as early as possible in the development cycle — often during the planning stages — to find potential problems before they create work to fix. But checking for potential technical problems is only a small part of what the QA team can do in this stage.&lt;/p&gt;

  &lt;p&gt;The QA team has a wide scope to make the product as good as it can be. This allows the tester to use not just their technical knowledge, but their non-technical knowledge, in their quest for quality.&lt;/p&gt;

  &lt;p&gt;In this talk, we will be outlining those non technical disciplines that a tester has, from historian to lawyer, and even spy. Testers will come away from this talk full of ideas of questions to ask of their product, while other members of the team will come away with a greater understanding of the knowledge a good tester can bring to the table.&lt;/p&gt;

  &lt;p&gt;Items covered will include accessibility, data protection, misuse of a product, and being culturally sensitive.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><summary type="html">I’m thrilled to be speaking at PHP Yorkshire this year. After helping out organise the conference for the last couple of years, it’s nice to be speaking there this year.</summary></entry><entry><title type="html">Speaking at TestBash Essentials, Brighton</title><link href="http://0.0.0.0:4000/speaking/2018-10/speaking-testbash-essentials-brighton" rel="alternate" type="text/html" title="Speaking at TestBash Essentials, Brighton" /><published>2018-10-09T19:00:00-05:00</published><updated>2018-10-09T19:00:00-05:00</updated><id>http://0.0.0.0:4000/speaking/2018-10/speaking-testbash-essentials-brighton</id><content type="html" xml:base="http://0.0.0.0:4000/speaking/2018-10/speaking-testbash-essentials-brighton">&lt;p&gt;I’m pleased to finally be able to say that I’ll be speaking at &lt;a href=&quot;https://ministryoftesting.com/events/testbash-essentials-brighton-2019&quot;&gt;TestBash Essentials&lt;/a&gt;, at TestBash Brighton next year.&lt;/p&gt;

&lt;p&gt;I’m honoured to be part of such an amazing lineup, in what is the best testing conference around.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Those teams working in an agile fashion will usually bring the tester in as early as possible in the development cycle — often during the planning stages — to find potential problems before they create work to fix. But checking for potential technical problems is only a small part of what the QA team can do in this stage.&lt;/p&gt;

  &lt;p&gt;The QA team has a wide scope to make the product as good as it can be. This allows the tester to use not just their technical knowledge, but their non-technical knowledge, in their quest for quality.&lt;/p&gt;

  &lt;p&gt;In this talk, we will be outlining those non technical disciplines that a tester has, from historian to lawyer, and even spy. Testers will come away from this talk full of ideas of questions to ask of their product, while other members of the team will come away with a greater understanding of the knowledge a good tester can bring to the table.&lt;/p&gt;

  &lt;p&gt;Items covered will include accessibility, data protection, misuse of a product, and being culturally sensitive.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It should be a great conference. And if you don’t fancy TestBash Essentials, there’s always the main conference day later in the day.&lt;/p&gt;

&lt;p&gt;See you there?&lt;/p&gt;</content><author><name></name></author><summary type="html">I’m pleased to finally be able to say that I’ll be speaking at TestBash Essentials, at TestBash Brighton next year.</summary></entry><entry><title type="html">Testers, get away from your desk</title><link href="http://0.0.0.0:4000/blog/2018-06/testers-get-away-your-desk" rel="alternate" type="text/html" title="Testers, get away from your desk" /><published>2018-06-18T19:00:00-05:00</published><updated>2018-06-18T19:00:00-05:00</updated><id>http://0.0.0.0:4000/blog/2018-06/testers-get-away-your-desk</id><content type="html" xml:base="http://0.0.0.0:4000/blog/2018-06/testers-get-away-your-desk">&lt;p&gt;I’m writing this blog post as part of the &lt;a href=&quot;https://club.ministryoftesting.com/t/sprint-4-what-s-the-non-technical-skill-that-every-tester-should-have-but-most-don-t-seem-to/15759&quot;&gt;Ministry of Testing Blogger’s Club&lt;/a&gt;. The subject is &lt;em&gt;“What’s the non-technical skill that every tester should have, but most don’t seem to?”&lt;/em&gt;. Most answers in the thread seem to involve communication, in some form. As important as communication is, most testers have reasonable skills in this.&lt;/p&gt;

&lt;p&gt;I think there’s something else we’re missing. It’s an easy skill to pick up, it’s the least technical one you can think of. We’ve being doing it all our lives, yet we forget to do it while testing.&lt;/p&gt;

&lt;p&gt;It’s to get away from your desk while testing.&lt;/p&gt;

&lt;p&gt;Most of the time, while we’re testing, we’re usually testing on a high speed network connection, on a good quality computer or device, in a room with minimal screen glare and good lighting, in an office environment. But our users don’t always use our products in that way.&lt;/p&gt;

&lt;p&gt;In my time as a tester, I’ve tested several different products. I’ve tested web games, mobile games, casino games, corporate apps, and internal tools. Few of these will be used in an office setting, so why am I testing these in an office setting?&lt;/p&gt;

&lt;p&gt;Of course, I’m not perfect with this. I should definitely follow my advice a lot more. But getting away from the desk can help with a lot of test cases, including but not limited to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Network connectivity is poor&lt;/li&gt;
  &lt;li&gt;Network connectivity is non-existent&lt;/li&gt;
  &lt;li&gt;Network connectivity is non-existent, but the phone reports that there is one&lt;/li&gt;
  &lt;li&gt;User is in motion (on a train, or a bus), which could cause network problems&lt;/li&gt;
  &lt;li&gt;User is in motion, which could make it harder for the user to read or use the touchscreen&lt;/li&gt;
  &lt;li&gt;User can’t use sound because it will disturb others (and theres no headphones), or there’s background noise&lt;/li&gt;
  &lt;li&gt;Screen glare from the sun&lt;/li&gt;
  &lt;li&gt;Screen is being used in a dull/dark environment&lt;/li&gt;
  &lt;li&gt;User is distracted by environment&lt;/li&gt;
  &lt;li&gt;User is in a confined space (eg. on a bus) so has minimal use of gestures&lt;/li&gt;
  &lt;li&gt;User is using an old computer&lt;/li&gt;
  &lt;li&gt;User isn’t using a top of the range desk/chair&lt;/li&gt;
  &lt;li&gt;User is using a laptop/tablet on a sofa/in bed&lt;/li&gt;
  &lt;li&gt;User is using a mobile phone lying on their side in bed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, next time you’re doing some testing, have a think: is this how the user is going to be using the product? Are there other ways people will be interacting with it? Is there somewhere else I can go or something I can do?&lt;/p&gt;

&lt;p&gt;(As an example, I once found a few bugs on an iPhone app by taking public transport into town and using the app on route. It turns out, HTTP requests were failing with the poor network connectivity on the route, which caused some interesting behaviour)&lt;/p&gt;</content><author><name></name></author><summary type="html">I’m writing this blog post as part of the Ministry of Testing Blogger’s Club. The subject is “What’s the non-technical skill that every tester should have, but most don’t seem to?”. Most answers in the thread seem to involve communication, in some form. As important as communication is, most testers have reasonable skills in this.</summary></entry><entry><title type="html">Using PHP composer with multiple versions of PHP</title><link href="http://0.0.0.0:4000/blog/2018-06/using-composer-with-multiple-versions-of-php" rel="alternate" type="text/html" title="Using PHP composer with multiple versions of PHP" /><published>2018-06-04T19:00:00-05:00</published><updated>2018-06-04T19:00:00-05:00</updated><id>http://0.0.0.0:4000/blog/2018-06/using-composer-with-multiple-versions-of-php</id><content type="html" xml:base="http://0.0.0.0:4000/blog/2018-06/using-composer-with-multiple-versions-of-php">&lt;p&gt;This problem has hurt me a few times while updating this (Drupal) website, so I’m mostly posting this braindump for myself. But, it might help somebody else.&lt;/p&gt;

&lt;p&gt;The main cause of my problem is I commit composer’s /vendor directory into git. (Why do I do this? &lt;a href=&quot;https://www.codeenigma.com/build/blog/do-you-really-need-composer-production&quot;&gt;Here’s an article which explains better than I could on why you may want to commit the vendor directory&lt;/a&gt;. In short, I find it more helpful to have all the code in git, for easier deployment. But, I may change my mind in the future, given these recent problems I’ve been having).&lt;/p&gt;

&lt;p&gt;Anyway. My computer (which I use to update Drupal for my site) runs php 7.1, and my server is still running php 7.0. This causes problems in terms of dependencies, when composer assumes I’ll be using php 7.1, so I inevitably get code errors.&lt;/p&gt;

&lt;p&gt;I solved this problem by adding a few lines to my composer.json:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;config&quot;: {
  &quot;sort-packages&quot;: true,
    &quot;platform&quot;: {
        &quot;php&quot;: &quot;7.0&quot;
    }
  },
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which worked fine, until a dependency update meant I didn’t have the correct php version. This caused composer to update to an older version of Drupal (Drupal 8.4.8 rather than Drupal 8.5.3), and this output when I forced composer to update to Drupal 8.5.x:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Problem 1
    - drupal/core 8.6.x-dev requires php ^5.5.9|&amp;gt;=7.0.8 -&amp;gt; your PHP version (7.1.7) overridden by &quot;config.platform.php&quot; version (7.0) does not satisfy that requirement.
    - drupal/core 8.5.x-dev requires php ^5.5.9|&amp;gt;=7.0.8 -&amp;gt; your PHP version (7.1.7) overridden by &quot;config.platform.php&quot; version (7.0) does not satisfy that requirement.
    - drupal/core 8.5.3 requires php ^5.5.9|&amp;gt;=7.0.8 -&amp;gt; your PHP version (7.1.7) overridden by &quot;config.platform.php&quot; version (7.0) does not satisfy that requirement.
    - drupal/core 8.5.2 requires php ^5.5.9|&amp;gt;=7.0.8 -&amp;gt; your PHP version (7.1.7) overridden by &quot;config.platform.php&quot; version (7.0) does not satisfy that requirement.
    - drupal/core 8.5.1 requires php ^5.5.9|&amp;gt;=7.0.8 -&amp;gt; your PHP version (7.1.7) overridden by &quot;config.platform.php&quot; version (7.0) does not satisfy that requirement.
    - drupal/core 8.5.0-rc1 requires php ^5.5.9|&amp;gt;=7.0.8 -&amp;gt; your PHP version (7.1.7) overridden by &quot;config.platform.php&quot; version (7.0) does not satisfy that requirement.
    - drupal/core 8.5.0-beta1 requires php ^5.5.9|&amp;gt;=7.0.8 -&amp;gt; your PHP version (7.1.7) overridden by &quot;config.platform.php&quot; version (7.0) does not satisfy that requirement.
    - drupal/core 8.5.0-alpha1 requires php ^5.5.9|&amp;gt;=7.0.8 -&amp;gt; your PHP version (7.1.7) overridden by &quot;config.platform.php&quot; version (7.0) does not satisfy that requirement.
    - drupal/core 8.5.0 requires php ^5.5.9|&amp;gt;=7.0.8 -&amp;gt; your PHP version (7.1.7) overridden by &quot;config.platform.php&quot; version (7.0) does not satisfy that requirement.
    - Installation request for drupal/core ~8.5 -&amp;gt; satisfiable by drupal/core[8.5.0, 8.5.0-alpha1, 8.5.0-beta1, 8.5.0-rc1, 8.5.1, 8.5.2, 8.5.3, 8.5.x-dev, 8.6.x-dev]. (As a side-note, my initial reaction was to try `composer update  --with-dependencies --ignore-platform-reqs`, which worked, but of course meant that composer wasn't downloading dependencies for php 7.0, which is what I wanted).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Turns out, as I had php 7.0.30 installed on my server, I could just update my composer.json to update the platform tag, and do a regular &lt;code class=&quot;highlighter-rouge&quot;&gt;composer update&lt;/code&gt;. Which did the job, for now. I’ll inevitably need to update my server to php 7.2, eventually.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So, tl;dr, there’s two things I need to remember:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If I commit my composer vendor folder, I need to &lt;strong&gt;ensure that both my work computer and my server have exactly the same version of php on both machines&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;If not, then to ensure code works properly, I need to add a platform tag into my composer.json file, ensuring it is accurate, including fix bug versions. And remember &lt;strong&gt;never to use &lt;code class=&quot;highlighter-rouge&quot;&gt;--ignore-platform-reqs&lt;/code&gt;&lt;/strong&gt;. It will mean that composer will update, but to the wrong version.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">This problem has hurt me a few times while updating this (Drupal) website, so I’m mostly posting this braindump for myself. But, it might help somebody else.</summary></entry><entry><title type="html">Speaking at UK Northwest VMUG</title><link href="http://0.0.0.0:4000/speaking/2018-05/speaking-uk-northwest-vmug" rel="alternate" type="text/html" title="Speaking at UK Northwest VMUG" /><published>2018-05-21T19:00:00-05:00</published><updated>2018-05-21T19:00:00-05:00</updated><id>http://0.0.0.0:4000/speaking/2018-05/speaking-uk-northwest-vmug</id><content type="html" xml:base="http://0.0.0.0:4000/speaking/2018-05/speaking-uk-northwest-vmug">&lt;p&gt;I’ll be speaking at UK Northwest VMUG tomorrow, doing my code review talk. &lt;a href=&quot;https://community.vmug.com/events/event-description?CalendarEventKey=ddae41ae-f877-4a3d-abcc-e54a12082e56&amp;amp;CommunityKey=7d2025b5-b298-4e75-969e-6e6a2a7a93f7&amp;amp;Home=%2fevents%2fevent-description&quot;&gt;Come along&lt;/a&gt;?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;So, you do code reviews, and that’s great. But there’s always more that you can check during the review. More places you can check for any potential bugs or problems before deployment, before you find yourself with technical debt. Or worse: unforeseen downtime.&lt;/p&gt;

  &lt;p&gt;In this talk I will be going through the things that you should be checking to ensure confidence for developers, project owners and stakeholders. We’ll be looking at documentation, commit messages, and common code problems, with examples and tips along the way. 
s&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><summary type="html">I’ll be speaking at UK Northwest VMUG tomorrow, doing my code review talk. Come along?</summary></entry><entry><title type="html">When is a wifi connection not a wifi connection?</title><link href="http://0.0.0.0:4000/blog/2018-05/when-is-a-wifi-connection-not-a-wifi-connection" rel="alternate" type="text/html" title="When is a wifi connection not a wifi connection?" /><published>2018-05-13T19:00:00-05:00</published><updated>2018-05-13T19:00:00-05:00</updated><id>http://0.0.0.0:4000/blog/2018-05/when-is-a-wifi-connection-not-a-wifi-connection</id><content type="html" xml:base="http://0.0.0.0:4000/blog/2018-05/when-is-a-wifi-connection-not-a-wifi-connection">&lt;p&gt;So, when building apps we always check that the app fails correctly with the correct error message when the phone is offline. But what if the phone reports as being online, but the data isn’t what you expect it to be?&lt;/p&gt;

&lt;p&gt;This is a common state, and a very common case of this happening is when the user receives a &lt;a href=&quot;https://en.wikipedia.org/wiki/Captive_portal&quot;&gt;captive portal&lt;/a&gt;, usually when first connecting to a public wifi. We need to ensure that the app doesn’t behave in unexpected ways in this case.&lt;/p&gt;

&lt;p&gt;There’s a way you can check this, without needing to visit your local cafe. It can be checked with &lt;a href=&quot;https://www.charlesproxy.com/&quot;&gt;Charles Proxy&lt;/a&gt;. (If you don’t have this tool, then you should go and get it. It’s pretty awesome)&lt;/p&gt;

&lt;p&gt;Once you’ve got Charles Proxy up and running, and your device talking to the proxy (there’s instructions elsewhere on &lt;a href=&quot;https://www.charlesproxy.com/documentation/faqs/using-charles-from-an-iphone/&quot;&gt;how to connect your phone to Charles Proxy&lt;/a&gt;), you can use the Map Local tool test this scenario.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First, you’ll need to create your “portal” to return. This can be something as simple as a text file, or as complex as a full webpage. The tool will return any file you give it.&lt;/li&gt;
  &lt;li&gt;Then, in Charles Proxy, go to &lt;code class=&quot;highlighter-rouge&quot;&gt;Tools -&amp;gt; Map Local&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Ensure that &lt;code class=&quot;highlighter-rouge&quot;&gt;Enable Map Local&lt;/code&gt; is switched on&lt;/li&gt;
  &lt;li&gt;Click &lt;code class=&quot;highlighter-rouge&quot;&gt;Add&lt;/code&gt; to create a new rule&lt;/li&gt;
  &lt;li&gt;You don’t need to fill in all these fields: I’ve got this feature working by completing the “Protocol” and “Host” fields inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;Map From&lt;/code&gt; section, and “Local path” from &lt;code class=&quot;highlighter-rouge&quot;&gt;Map To&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;Inside &lt;code class=&quot;highlighter-rouge&quot;&gt;Protocol&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Host&lt;/code&gt; I enter the domain of the URL I want to overwrite (eg. “http” and “thatdamnqa.com”)&lt;/li&gt;
      &lt;li&gt;Inside &lt;code class=&quot;highlighter-rouge&quot;&gt;Local path&lt;/code&gt; I enter the path of the file I want to send instead&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;This blog post was written as part of &lt;a href=&quot;https://club.ministryoftesting.com/t/sprint-1-a-technical-tip-all-testers-should-know/14619&quot;&gt;Ministry of Testing’s Blogger’s Club&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">So, when building apps we always check that the app fails correctly with the correct error message when the phone is offline. But what if the phone reports as being online, but the data isn’t what you expect it to be?</summary></entry><entry><title type="html">Testing on previous versions of browsers</title><link href="http://0.0.0.0:4000/blog/2018-04/testing-previous-versions-browsers" rel="alternate" type="text/html" title="Testing on previous versions of browsers" /><published>2018-04-09T19:00:00-05:00</published><updated>2018-04-09T19:00:00-05:00</updated><id>http://0.0.0.0:4000/blog/2018-04/testing-previous-versions-browsers</id><content type="html" xml:base="http://0.0.0.0:4000/blog/2018-04/testing-previous-versions-browsers">&lt;p&gt;This is something that comes up quite a lot, so I decided to write down once and for all my opinion on supporting old versions of those browsers that are updated often.&lt;/p&gt;

&lt;p&gt;This was a ten minute thread (and reply) that I posted to the Ministry of Testing Club.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In recent years, Chrome and Firefox have started having regular release cycles on their browsers, which automatically update every 6 weeks or so.&lt;/p&gt;

  &lt;p&gt;But the major problem is you can’t assume that everyone has restarted their browser to ensure they’re using the latest version, and you can’t easily download an old version of the browser and not have it automatically update while you’re testing.&lt;/p&gt;

  &lt;p&gt;How does everybody go about browser testing, keeping older versions in mind?&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><summary type="html">This is something that comes up quite a lot, so I decided to write down once and for all my opinion on supporting old versions of those browsers that are updated often.</summary></entry><entry><title type="html">We depend on Acceptance Criteria too much</title><link href="http://0.0.0.0:4000/blog/2018-01/we-depend-on-acceptance-criteria-too-much" rel="alternate" type="text/html" title="We depend on Acceptance Criteria too much" /><published>2018-01-22T18:00:00-06:00</published><updated>2018-01-22T18:00:00-06:00</updated><id>http://0.0.0.0:4000/blog/2018-01/we-depend-on-acceptance-criteria-too-much</id><content type="html" xml:base="http://0.0.0.0:4000/blog/2018-01/we-depend-on-acceptance-criteria-too-much">&lt;p&gt;In the last year or so, it realised that perhaps we might be relying on acceptance criteria too much. Doing so can be dangerous; it can easily lead to checkbox testing, and it can lead to the tester (and even the developer) not thinking at all.&lt;/p&gt;

&lt;p&gt;That’s not to say that we shouldn’t use ACs: let me explain.&lt;/p&gt;

&lt;h3 id=&quot;were-writing-down-things-that-we-dont-need-to-write-just-for-the-sake-of-writing-it-down&quot;&gt;We’re writing down things that we don’t need to write, just for the sake of writing it down&lt;/h3&gt;

&lt;p&gt;I think that ACs should be high level. They’re the things that the product owner (or customer) cares about. For example, they want to increase sales of a widget, so in order to do that they want a hero image on their homepage to advertise their sale of widgets. So the acceptance criteria would be there’s a hero image (widget-sales.png) on the homepage which links to the widgets page.&lt;/p&gt;

&lt;p&gt;If there are already hero images on the site (or even if this is replacing an existing hero image), then there’s certain things that can be taken for granted which simply don’t need to be stated.&lt;/p&gt;

&lt;p&gt;We don’t need to know what the size of the hero image should if it’s the same as every other hero image on the site because it can be assumed knowledge.
As can the behaviour if the site is responsive (does it resize or are other images displayed on smaller screens).
As can the alt text of the image, if this is something provided by the copywriter alongside the image itself.&lt;/p&gt;

&lt;p&gt;If we include all of this information, we’ve fallen into the trap of checkbox testing. We’re writing down specific things to check where instead these are things that are checked as part of the greater ticket. We’re writing things down that are already obvious, that will be provided as part of design docs, that are part of domain knowledge.&lt;/p&gt;

&lt;p&gt;I’m not saying “don’t write anything down”. I’m saying don’t write down things that are already part of domain knowledge, already provided elsewhere, or are obvious.&lt;/p&gt;

&lt;h3 id=&quot;were-taking-decisions-away-from-developers-and-testers-and-expecting-the-product-owner-to-make-them-all-even-when-its-not-their-areas-of-expertise&quot;&gt;We’re taking decisions away from developers and testers and expecting the product owner to make them all, even when it’s not their areas of expertise&lt;/h3&gt;

&lt;p&gt;As I said, ACs are things that the product owner actually cares about. If we return to our widget hero image example again, all the product owner cares about is “I want to sell more widgets, so I want a hero image on the homepage that will take the user to a page where they can buy widgets”.&lt;/p&gt;

&lt;p&gt;They probably don’t care how it looks: that’s for the designer to decide. They don’t care how you make the image accessible, as long as it’s accessible: that’s for the developer/UX people to decide. They don’t care whether the hero image uses Javascript to load the page, or whether the image should be hosted on a CDN: these are decisions best made by the developer.&lt;/p&gt;

&lt;p&gt;If we expect the product owner to answer these questions while writing the ACs, then we expect the product owner to have the answers; where usually they aren’t in a position to know them (or don’t have any strong opinions). If we leave them out of the acceptance criteria, we’re giving the designers, UX people, developers, and testers the freedom to do what they feel is best.&lt;/p&gt;

&lt;p&gt;That’s of course not to say that the product owner can’t have an opinion — and these can be expressed in the work ticket — but they shouldn’t be part of the formal acceptance criteria.&lt;/p&gt;

&lt;p&gt;That’s also not to say that if the people implementing the body of work isn’t sure they can’t ask the product owner. As a tester, if I’m unsure how something should act, I can always go to the product owner and ask. Because ACs aren’t a replacement for communication.&lt;/p&gt;

&lt;h3 id=&quot;the-acceptance-criteria-arent-a-list-of-tests&quot;&gt;The acceptance criteria aren’t a list of tests&lt;/h3&gt;

&lt;p&gt;Once we write down acceptance criteria, we fall down the trap of a non-tester thinking “well this is what I need to do in order to have a working solution”. Developers will stop thinking of edge cases. And the people testing the feature — especially if they aren’t testers — will test nothing else. They won’t read between the lines, and they’ll only follow the happy path. They’ll start checkbox testing.&lt;/p&gt;

&lt;p&gt;They should also never be used as some kind of log of “what’s been tested”. Because it will always be incomplete. There are always things that we, as testers, always do that we just don’t think about. There are always extra things we check, outside of the acceptance criteria. That’s not to say we shouldn’t make a note of things we’ve checked: this can be an appropriate thing to do. But if we do, they aren’t acceptance criteria.&lt;/p&gt;

&lt;h3 id=&quot;the-acceptance-criteria-isnt-documentation&quot;&gt;The acceptance criteria isn’t documentation&lt;/h3&gt;

&lt;p&gt;We shouldn’t have ACs as documentation, either. And it would be dangerous to think otherwise. This is what a ticket is (or at least, should be), at a given point of time, independent of every other feature (implemented or planned).&lt;/p&gt;

&lt;p&gt;The feature might later change, or the site might later change. For example, if the AC for calculating the price of a shopping cart says “It should be the price of the product, plus 20% VAT, plus £5 shipping charge”, this will no longer be documentation if the VAT amount has changed, or after the shipping charge is removed.&lt;/p&gt;

&lt;h3 id=&quot;you-can-never-have-a-full-list-of-acceptance-criteria-anyway&quot;&gt;You can never have a full list of acceptance criteria, anyway&lt;/h3&gt;

&lt;p&gt;To expect to have a full list of acceptance criteria would be a fool’s errand. There’s always more things that you can test. There’s always things you can ask. There’s always assumptions that can be made. To write down all of these assumptions and questions would be a waste of time: especially when the answer is already known.&lt;/p&gt;

&lt;h3 id=&quot;so-lets-start-being-selective&quot;&gt;So let’s start being selective&lt;/h3&gt;

&lt;p&gt;Let’s start being selective on what our ACs say. Heck, let’s start being selective over whether a ticket has AC at all. If we’re writing things in a ticket just because process says we should, are we really following an agile workflow, or are we just blindly following process without questioning it?&lt;/p&gt;</content><author><name></name></author><summary type="html">In the last year or so, it realised that perhaps we might be relying on acceptance criteria too much. Doing so can be dangerous; it can easily lead to checkbox testing, and it can lead to the tester (and even the developer) not thinking at all.</summary></entry><entry><title type="html">Slides: DrupalCamp Dublin 2017</title><link href="http://0.0.0.0:4000/speaking/2017-10/code-review-software-drupalcamp-dublin-2017" rel="alternate" type="text/html" title="Slides: DrupalCamp Dublin 2017" /><published>2017-10-20T19:00:00-05:00</published><updated>2017-10-20T19:00:00-05:00</updated><id>http://0.0.0.0:4000/speaking/2017-10/code-review-software-drupalcamp-dublin-2017</id><content type="html" xml:base="http://0.0.0.0:4000/speaking/2017-10/code-review-software-drupalcamp-dublin-2017">&lt;p&gt;I gave my code review talk at DrupalCamp Dublin today. &lt;a href=&quot;https://speakerdeck.com/thatdamnqa/theres-more-to-code-review-than-you-might-think-1&quot;&gt;Here’s the slides&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">I gave my code review talk at DrupalCamp Dublin today. Here’s the slides.</summary></entry><entry><title type="html">Talk: There’s more to code review than you might think at PHP-Usergroup Hamburg</title><link href="http://0.0.0.0:4000/speaking/2017-10/code-review-software-phpughh" rel="alternate" type="text/html" title="Talk: There's more to code review than you might think at PHP-Usergroup Hamburg" /><published>2017-10-05T19:00:00-05:00</published><updated>2017-10-05T19:00:00-05:00</updated><id>http://0.0.0.0:4000/speaking/2017-10/code-review-software-phpughh</id><content type="html" xml:base="http://0.0.0.0:4000/speaking/2017-10/code-review-software-phpughh">&lt;p&gt;Not content with speaking at the local tester’s group, I’ll also be speaking at the local php usergroup next week. I’ll be giving a 20 minute version of my code review talk.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;So, you do code reviews, and that’s great. But there’s always more that you can check during the review. More places you can check for any potential bugs or problems before deployment, before you find yourself with technical debt. Or worse: unforeseen downtime.&lt;/p&gt;

  &lt;p&gt;In this talk I will be going through the things that you should be checking to ensure confidence for developers, project owners and stakeholders. We’ll be looking at documentation, commit messages, and common code problems, with examples and tips along the way.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://www.meetup.com/preview/phpughh/events/qldszhywnbnb&quot;&gt;Meetup&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Not content with speaking at the local tester’s group, I’ll also be speaking at the local php usergroup next week. I’ll be giving a 20 minute version of my code review talk.</summary></entry></feed>